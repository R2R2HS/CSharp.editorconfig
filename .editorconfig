# Удалите строку ниже, если вы хотите наследовать параметры .editorconfig из каталогов, расположенных выше в иерархии
root = true

# Файлы C#
[*.cs]

#### Основные параметры EditorConfig ####

# Отступы и интервалы
indent_size = 1
indent_style = space
tab_width = 1

# Предпочтения для новых строк
end_of_line = crlf
insert_final_newline = false

#### Действия кода .NET ####

# Члены типа
dotnet_hide_advanced_members = false
dotnet_member_insertion_location = with_other_members_of_the_same_kind
dotnet_property_generation_behavior = prefer_throwing_properties

# Поиск символов
dotnet_search_reference_assemblies = true

#### Рекомендации по написанию кода .NET ####

# Упорядочение Using
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = false
file_header_template = unset

# Предпочтения для this. и Me.
dotnet_style_qualification_for_event = true:suggestion
dotnet_style_qualification_for_field = true
dotnet_style_qualification_for_method = true:suggestion
dotnet_style_qualification_for_property = true:suggestion

# Параметры использования ключевых слов языка и типов BCL
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Предпочтения для скобок
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity

# Предпочтения модификатора
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Выражения уровень предпочтения
dotnet_prefer_system_hash_code = false:silent
dotnet_style_coalesce_expression = true
dotnet_style_collection_initializer = false
dotnet_style_explicit_tuple_names = true
dotnet_style_namespace_match_folder = true
dotnet_style_null_propagation = true
dotnet_style_object_initializer = false
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = false
dotnet_style_prefer_collection_expression = when_types_loosely_match
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_conditional_expression_over_assignment = false
dotnet_style_prefer_conditional_expression_over_return = false
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_inferred_anonymous_type_member_names = true
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_style_prefer_simplified_interpolation = true

# Предпочтения для полей
dotnet_style_readonly_field = true

# Настройки параметров
dotnet_code_quality_unused_parameters = all

# Параметры подавления
dotnet_remove_unnecessary_suppression_exclusions = none

# Предпочтения для новых строк
dotnet_style_allow_multiple_blank_lines_experimental = true
dotnet_style_allow_statement_immediately_after_block_experimental = true

#### Рекомендации по написанию кода C# ####

# Предпочтения var
csharp_style_var_elsewhere = true
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true

# Члены, заданные выражениями
csharp_style_expression_bodied_accessors = false
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_indexers = false
csharp_style_expression_bodied_lambdas = false
csharp_style_expression_bodied_local_functions = false
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_operators = false
csharp_style_expression_bodied_properties = false

# Настройки соответствия шаблонов
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_extended_property_pattern = true
csharp_style_prefer_not_pattern = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_switch_expression = false

# Настройки проверки на null
csharp_style_conditional_delegate_call = true

# Предпочтения модификатора
csharp_prefer_static_anonymous_function = true
csharp_prefer_static_local_function = true
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async
csharp_style_prefer_readonly_struct = true
csharp_style_prefer_readonly_struct_member = true

# Предпочтения для блоков кода
csharp_prefer_braces = true
csharp_prefer_simple_using_statement = false:silent
csharp_prefer_system_threading_lock = true
csharp_style_namespace_declarations = block_scoped
csharp_style_prefer_method_group_conversion = true
csharp_style_prefer_primary_constructors = true
csharp_style_prefer_top_level_statements = false:suggestion

# Выражения уровень предпочтения
csharp_prefer_simple_default_expression = false
csharp_style_deconstructed_variable_declaration = true
csharp_style_implicit_object_creation_when_type_is_apparent = true
csharp_style_inlined_variable_declaration = true
csharp_style_prefer_implicitly_typed_lambda_expression = true
csharp_style_prefer_index_operator = false
csharp_style_prefer_local_over_anonymous_function = true
csharp_style_prefer_null_check_over_type_check = true
csharp_style_prefer_range_operator = false
csharp_style_prefer_tuple_swap = false
csharp_style_prefer_unbound_generic_type_in_nameof = true
csharp_style_prefer_utf8_string_literals = true
csharp_style_throw_expression = true
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

# предпочтения для директивы using
csharp_using_directive_placement = outside_namespace

# Предпочтения для новых строк
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true
csharp_style_allow_embedded_statements_on_same_line_experimental = true

#### Правила форматирования C# ####

# Предпочтения для новых строк
csharp_new_line_before_catch = false
csharp_new_line_before_else = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = none
csharp_new_line_between_query_expression_clauses = true

# Параметры отступов
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Предпочтения для интервалов
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Параметры переноса
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Стили именования ####

# Правила именования

dotnet_naming_rule.namespace_should_be_pascal.severity = suggestion
dotnet_naming_rule.namespace_should_be_pascal.symbols = namespace
dotnet_naming_rule.namespace_should_be_pascal.style = pascal

dotnet_naming_rule.defaultclass_should_be_pascal.severity = suggestion
dotnet_naming_rule.defaultclass_should_be_pascal.symbols = defaultclass
dotnet_naming_rule.defaultclass_should_be_pascal.style = pascal

dotnet_naming_rule.abstractclass_should_be_basepostfixpascal.severity = suggestion
dotnet_naming_rule.abstractclass_should_be_basepostfixpascal.symbols = abstractclass
dotnet_naming_rule.abstractclass_should_be_basepostfixpascal.style = basepostfixpascal

dotnet_naming_rule.structure_should_be_pascal.severity = suggestion
dotnet_naming_rule.structure_should_be_pascal.symbols = structure
dotnet_naming_rule.structure_should_be_pascal.style = pascal

dotnet_naming_rule.interface_should_be_iprefixpascal.severity = suggestion
dotnet_naming_rule.interface_should_be_iprefixpascal.symbols = interface
dotnet_naming_rule.interface_should_be_iprefixpascal.style = iprefixpascal

dotnet_naming_rule.enum_should_be_eprefixpascal.severity = suggestion
dotnet_naming_rule.enum_should_be_eprefixpascal.symbols = enum
dotnet_naming_rule.enum_should_be_eprefixpascal.style = eprefixpascal

dotnet_naming_rule.property_should_be_pascal.severity = suggestion
dotnet_naming_rule.property_should_be_pascal.symbols = property
dotnet_naming_rule.property_should_be_pascal.style = pascal

dotnet_naming_rule.method_should_be_pascal.severity = suggestion
dotnet_naming_rule.method_should_be_pascal.symbols = method
dotnet_naming_rule.method_should_be_pascal.style = pascal

dotnet_naming_rule.publicinstancefield_should_be_m_prefixpascal.severity = suggestion
dotnet_naming_rule.publicinstancefield_should_be_m_prefixpascal.symbols = publicinstancefield
dotnet_naming_rule.publicinstancefield_should_be_m_prefixpascal.style = m_prefixpascal

dotnet_naming_rule.privateinstancefield_should_be_m_prefixpascal.severity = suggestion
dotnet_naming_rule.privateinstancefield_should_be_m_prefixpascal.symbols = privateinstancefield
dotnet_naming_rule.privateinstancefield_should_be_m_prefixpascal.style = m_prefixpascal

dotnet_naming_rule.event_should_be_pascal.severity = suggestion
dotnet_naming_rule.event_should_be_pascal.symbols = event
dotnet_naming_rule.event_should_be_pascal.style = pascal

dotnet_naming_rule.delegate_should_be_pascal.severity = suggestion
dotnet_naming_rule.delegate_should_be_pascal.symbols = delegate
dotnet_naming_rule.delegate_should_be_pascal.style = pascal

dotnet_naming_rule.param_should_be_camel.severity = suggestion
dotnet_naming_rule.param_should_be_camel.symbols = param
dotnet_naming_rule.param_should_be_camel.style = camel

dotnet_naming_rule.staticfield_should_be_s_prefixpascal.severity = suggestion
dotnet_naming_rule.staticfield_should_be_s_prefixpascal.symbols = staticfield
dotnet_naming_rule.staticfield_should_be_s_prefixpascal.style = s_prefixpascal

dotnet_naming_rule.generic_should_be_tprefixpascal.severity = suggestion
dotnet_naming_rule.generic_should_be_tprefixpascal.symbols = generic
dotnet_naming_rule.generic_should_be_tprefixpascal.style = tprefixpascal

# Спецификации символов

dotnet_naming_symbols.namespace.applicable_kinds = namespace
dotnet_naming_symbols.namespace.applicable_accessibilities = 
dotnet_naming_symbols.namespace.required_modifiers = 

dotnet_naming_symbols.defaultclass.applicable_kinds = class
dotnet_naming_symbols.defaultclass.applicable_accessibilities = *
dotnet_naming_symbols.defaultclass.required_modifiers = async, const, readonly, static

dotnet_naming_symbols.abstractclass.applicable_kinds = class
dotnet_naming_symbols.abstractclass.applicable_accessibilities = *
dotnet_naming_symbols.abstractclass.required_modifiers = abstract

dotnet_naming_symbols.structure.applicable_kinds = struct
dotnet_naming_symbols.structure.applicable_accessibilities = *
dotnet_naming_symbols.structure.required_modifiers = *

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = *
dotnet_naming_symbols.interface.required_modifiers = *

dotnet_naming_symbols.enum.applicable_kinds = enum
dotnet_naming_symbols.enum.applicable_accessibilities = *
dotnet_naming_symbols.enum.required_modifiers = *

dotnet_naming_symbols.property.applicable_kinds = property
dotnet_naming_symbols.property.applicable_accessibilities = *
dotnet_naming_symbols.property.required_modifiers = *

dotnet_naming_symbols.method.applicable_kinds = method, local_function
dotnet_naming_symbols.method.applicable_accessibilities = *
dotnet_naming_symbols.method.required_modifiers = *

dotnet_naming_symbols.publicinstancefield.applicable_kinds = field
dotnet_naming_symbols.publicinstancefield.applicable_accessibilities = public, internal, protected, protected_internal, private_protected, local
dotnet_naming_symbols.publicinstancefield.required_modifiers = abstract, async, const, readonly

dotnet_naming_symbols.privateinstancefield.applicable_kinds = field
dotnet_naming_symbols.privateinstancefield.applicable_accessibilities = private
dotnet_naming_symbols.privateinstancefield.required_modifiers = abstract, async, const, readonly

dotnet_naming_symbols.event.applicable_kinds = event
dotnet_naming_symbols.event.applicable_accessibilities = *
dotnet_naming_symbols.event.required_modifiers = *

dotnet_naming_symbols.delegate.applicable_kinds = delegate
dotnet_naming_symbols.delegate.applicable_accessibilities = *
dotnet_naming_symbols.delegate.required_modifiers = *

dotnet_naming_symbols.param.applicable_kinds = parameter
dotnet_naming_symbols.param.applicable_accessibilities = *
dotnet_naming_symbols.param.required_modifiers = *

dotnet_naming_symbols.staticfield.applicable_kinds = field
dotnet_naming_symbols.staticfield.applicable_accessibilities = *
dotnet_naming_symbols.staticfield.required_modifiers = *

dotnet_naming_symbols.generic.applicable_kinds = type_parameter
dotnet_naming_symbols.generic.applicable_accessibilities = *
dotnet_naming_symbols.generic.required_modifiers = *

# Стили именования

dotnet_naming_style.iprefixpascal.required_prefix = I
dotnet_naming_style.iprefixpascal.required_suffix = 
dotnet_naming_style.iprefixpascal.word_separator = 
dotnet_naming_style.iprefixpascal.capitalization = pascal_case

dotnet_naming_style.m_prefixpascal.required_prefix = m_
dotnet_naming_style.m_prefixpascal.required_suffix = 
dotnet_naming_style.m_prefixpascal.word_separator = 
dotnet_naming_style.m_prefixpascal.capitalization = pascal_case

dotnet_naming_style.s_prefixpascal.required_prefix = s_
dotnet_naming_style.s_prefixpascal.required_suffix = 
dotnet_naming_style.s_prefixpascal.word_separator = 
dotnet_naming_style.s_prefixpascal.capitalization = pascal_case

dotnet_naming_style.pascal.required_prefix = 
dotnet_naming_style.pascal.required_suffix = 
dotnet_naming_style.pascal.word_separator = 
dotnet_naming_style.pascal.capitalization = pascal_case

dotnet_naming_style.camel.required_prefix = 
dotnet_naming_style.camel.required_suffix = 
dotnet_naming_style.camel.word_separator = 
dotnet_naming_style.camel.capitalization = camel_case

dotnet_naming_style.basepostfixpascal.required_prefix = 
dotnet_naming_style.basepostfixpascal.required_suffix = Base
dotnet_naming_style.basepostfixpascal.word_separator = 
dotnet_naming_style.basepostfixpascal.capitalization = pascal_case

dotnet_naming_style.eprefixpascal.required_prefix = E
dotnet_naming_style.eprefixpascal.required_suffix = 
dotnet_naming_style.eprefixpascal.word_separator = 
dotnet_naming_style.eprefixpascal.capitalization = pascal_case

dotnet_naming_style.tprefixpascal.required_prefix = T
dotnet_naming_style.tprefixpascal.required_suffix = 
dotnet_naming_style.tprefixpascal.word_separator = 
dotnet_naming_style.tprefixpascal.capitalization = pascal_case
